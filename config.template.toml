###################### OpenHands Configuration Example ######################
#
# All settings have default values, so you only need to uncomment and
# modify what you want to change
# The fields within each section are sorted in alphabetical order.
#
##############################################################################

#################################### Core ####################################
# General core configurations
##############################################################################
[core]
# API key for E2B
#e2b_api_key = ""

# Base path for the workspace
workspace_base = "./workspace"

# Cache directory path
#cache_dir = "/tmp/cache"

# Debugging enabled
#debug = false

# Disable color in terminal output
#disable_color = false

# Enable saving and restoring the session when run from CLI
#enable_cli_session = false

# File store path
#file_store_path = "/tmp/file_store"

# File store type
#file_store = "memory"

# List of allowed file extensions for uploads
#file_uploads_allowed_extensions = [".*"]

# Maximum file size for uploads, in megabytes
#file_uploads_max_file_size_mb = 0

# Maximum budget per task, 0.0 means no limit
#max_budget_per_task = 0.0

# Maximum number of iterations
#max_iterations = 100

# Path to mount the workspace in the sandbox
#workspace_mount_path_in_sandbox = "/workspace"

# Path to mount the workspace
#workspace_mount_path = ""

# Path to rewrite the workspace mount path to
#workspace_mount_rewrite = ""

# Run as openhands
#run_as_openhands = true

# Runtime environment
#runtime = "eventstream"

# Name of the default agent
#default_agent = "CodeActAgent"

# JWT secret for authentication
#jwt_secret = ""

# Restrict file types for file uploads
#file_uploads_restrict_file_types = false

# List of allowed file extensions for uploads
#file_uploads_allowed_extensions = [".*"]

#################################### LLM #####################################
# Configuration for LLM models (group name starts with 'llm')
# use 'llm' for the default LLM config
##############################################################################
[llm]
# AWS access key ID
#aws_access_key_id = ""

# AWS region name
#aws_region_name = ""

# AWS secret access key
#aws_secret_access_key = ""

# API key to use
api_key = "your-api-key"

# API base URL
#base_url = ""

# API version
#api_version = ""

# Cost per input token
#input_cost_per_token = 0.0

# Cost per output token
#output_cost_per_token = 0.0

# Custom LLM provider
#custom_llm_provider = ""

# Embedding API base URL
#embedding_base_url = ""

# Embedding deployment name
#embedding_deployment_name = ""

# Embedding model to use
embedding_model = "local"

# Maximum number of characters in an observation's content
#max_message_chars = 10000

# Maximum number of input tokens
#max_input_tokens = 0

# Maximum number of output tokens
#max_output_tokens = 0

# Model to use
model = "gpt-4o"

# Number of retries to attempt when an operation fails with the LLM.
# Increase this value to allow more attempts before giving up
#num_retries = 8

# Maximum wait time (in seconds) between retry attempts
# This caps the exponential backoff to prevent excessively long
#retry_max_wait = 120

# Minimum wait time (in seconds) between retry attempts
# This sets the initial delay before the first retry
#retry_min_wait = 15

# Multiplier for exponential backoff calculation
# The wait time increases by this factor after each failed attempt
# A value of 2.0 means each retry waits twice as long as the previous one
#retry_multiplier = 2.0

# Drop any unmapped (unsupported) params without causing an exception
#drop_params = false

# Using the prompt caching feature if provided by the LLM and supported
#caching_prompt = true

# Base URL for the OLLAMA API
#ollama_base_url = ""

# Temperature for the API
#temperature = 0.0

# Timeout for the API
#timeout = 0

# Top p for the API
#top_p = 1.0

# If model is vision capable, this option allows to disable image processing (useful for cost reduction).
#disable_vision = true

################################### Router ###################################
# litellm Router configuration
##############################################################################

# Routing strategy to use for the router. Options include "simple-shuffle", "round-robin", etc.
#router_routing_strategy = "simple-shuffle"

# Number of retries to attempt when an operation fails.
#router_num_retries = 3

# Cooldown time (in seconds) between retry attempts.
#router_cooldown_time = 1.0

# Number of allowed failures before giving up.
#router_allowed_fails = 5

# Whether to cache responses from the router. This would require additional modules, like Redis.
# (not implemented by OpenHands!)
#router_cache_responses = false

# List notation is used to specify multiple models for the same configuration!
# Each model can have its own specific parameters.

# Example configuration for OpenAI's gpt-4o model
#[[llm.router_models]]
#model_name = "gpt-4o"
#api_key = "your-openai-api-key"
#litellm_params = {
#    "model": "gpt-4o",  # Model name
#    "api_key": "OPENAI_API_KEY",  # API key for the model
#    "max_retries": 3,  # Maximum number of retries for this model
#    "max_tokens": 100  # Maximum number of tokens for the completion
#}
#model_info = {"id": "1234"}  # Additional model information
#tpm = 100000  # Tokens per minute
#rpm = 10000  # Requests per minute

# Example configuration for Anthropic's Claude-3 Opus model
#[[llm.router_models]]
#model_name = "claude-3-5-sonnet-20240620"
#api_key = "your-anthropic-api-key"
#litellm_params = {
#    "model": "azure/claude-3-5-sonnet-20240620",  # Model name
#    "api_key": "AZURE_API_KEY",  # API key for the model
#    "api_base": "https://your-azure-endpoint.openai.azure.com",  # Base URL for the API
#    "api_version": "2023-05-15",  # API version
#    "max_retries": 7,  # Maximum number of retries for this model
#    "timeout": 0.01,  # Timeout for the API
#    "stream_timeout": 0.000_001,  # Stream timeout for the API
#    "max_tokens": 100  # Maximum number of tokens for the completion
#}
#tpm = 100000  # Tokens per minute
#rpm = 10000  # Requests per minute

# Example configuration for Azure's GPT-4 model
#[[llm.router_models]]
#model_name = "azure/gpt-4"
#api_base = "https://your-azure-endpoint.openai.azure.com"
#api_key = "your-azure-api-key"
#api_version = "2023-05-15"
#litellm_params = {
#    "max_tokens": 100  # Maximum number of tokens for the completion
#}

# Router options for additional configurations
#[llm.router_options]
#timeout = 30  # Timeout for the router operations
#max_retries = 3  # Maximum number of retries for the router
#set_verbose = true  # Enable verbose logging
#debug_level = 1  # Debug level for logging
#default_litellm_params = {}  # Default parameters for litellm

# Cache-related options for the router
#[llm.router_cache_kwargs]
# Add any cache-related options here if needed

#################################### Agent ###################################
# Configuration for agents (group name starts with 'agent')
# Use 'agent' for the default agent config
# otherwise, group name must be `agent.<agent_name>` (case-sensitive), e.g.
# agent.CodeActAgent
##############################################################################
[agent]
# Name of the micro agent to use for this agent
#micro_agent_name = ""

# Memory enabled
#memory_enabled = false

# Memory maximum threads
#memory_max_threads = 2

# LLM config group to use
#llm_config = 'your-llm-config-group'

[agent.RepoExplorerAgent]
# Example: use a cheaper model for RepoExplorerAgent to reduce cost, especially
# useful when an agent doesn't demand high quality but uses a lot of tokens
llm_config = 'gpt3'

#################################### Sandbox ###################################
# Configuration for the sandbox
##############################################################################
[sandbox]
# Sandbox timeout in seconds
#timeout = 120

# Sandbox user ID
#user_id = 1000

# Container image to use for the sandbox
#base_container_image = "nikolaik/python-nodejs:python3.11-nodejs22"

# Use host network
#use_host_network = false

# Enable auto linting after editing
#enable_auto_lint = false

# Whether to initialize plugins
#initialize_plugins = true

# Extra dependencies to install in the runtime image
#runtime_extra_deps = ""

# Environment variables to set at the launch of the runtime
#runtime_startup_env_vars = {}

# BrowserGym environment to use for evaluation
#browsergym_eval_env = ""

#################################### Security ###################################
# Configuration for security features
##############################################################################
[security]

# Enable confirmation mode
#confirmation_mode = false

# The security analyzer to use
#security_analyzer = ""

#################################### Eval ####################################
# Configuration for the evaluation, please refer to the specific evaluation
# plugin for the available options
##############################################################################
