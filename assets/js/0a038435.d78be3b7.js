"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9445],{5135:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>l,default:()=>o,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var t=n(4848),i=n(8453);const r={sidebar_label:"plan",title:"opendevin.plan"},l=void 0,a={id:"python/opendevin/plan",title:"opendevin.plan",description:"Task Objects",source:"@site/docs/python/opendevin/plan.md",sourceDirName:"python/opendevin",slug:"/python/opendevin/plan",permalink:"/OpenDevin/docs/python/opendevin/plan",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{sidebar_label:"plan",title:"opendevin.plan"},sidebar:"apiSidebar",previous:{title:"main",permalink:"/OpenDevin/docs/python/opendevin/main"}},d={},c=[{value:"Task Objects",id:"task-objects",level:2},{value:"__init__",id:"__init__",level:4},{value:"to_string",id:"to_string",level:4},{value:"to_dict",id:"to_dict",level:4},{value:"set_state",id:"set_state",level:4},{value:"get_current_task",id:"get_current_task",level:4},{value:"Plan Objects",id:"plan-objects",level:2},{value:"__init__",id:"__init__-1",level:4},{value:"__str__",id:"__str__",level:4},{value:"get_task_by_id",id:"get_task_by_id",level:4},{value:"add_subtask",id:"add_subtask",level:4},{value:"set_subtask_state",id:"set_subtask_state",level:4},{value:"get_current_task",id:"get_current_task-1",level:4}];function h(e){const s={code:"code",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{id:"task-objects",children:"Task Objects"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"class Task()\n"})}),"\n",(0,t.jsx)(s.h4,{id:"__init__",children:"__init__"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"def __init__(parent: 'Task | None',\n             goal: str,\n             state: str = OPEN_STATE,\n             subtasks: List = [])\n"})}),"\n",(0,t.jsx)(s.p,{children:"Initializes a new instance of the Task class."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"parent"})," - The parent task, or None if it is the root task."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"goal"})," - The goal of the task."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"state"})," - The initial state of the task."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"subtasks"})," - A list of subtasks associated with this task."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"to_string",children:"to_string"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"def to_string(indent='')\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns a string representation of the task and its subtasks."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"indent"})," - The indentation string for formatting the output."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsx)(s.p,{children:"A string representation of the task and its subtasks."}),"\n",(0,t.jsx)(s.h4,{id:"to_dict",children:"to_dict"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"def to_dict()\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns a dictionary representation of the task."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsx)(s.p,{children:"A dictionary containing the task's attributes."}),"\n",(0,t.jsx)(s.h4,{id:"set_state",children:"set_state"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"def set_state(state)\n"})}),"\n",(0,t.jsx)(s.p,{children:"Sets the state of the task and its subtasks."}),"\n",(0,t.jsx)(s.p,{children:"Args:            state: The new state of the task."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Raises"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"PlanInvalidStateError"})," - If the provided state is invalid."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"get_current_task",children:"get_current_task"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"def get_current_task() -> 'Task | None'\n"})}),"\n",(0,t.jsx)(s.p,{children:"Retrieves the current task in progress."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsx)(s.p,{children:"The current task in progress, or None if no task is in progress."}),"\n",(0,t.jsx)(s.h2,{id:"plan-objects",children:"Plan Objects"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"class Plan()\n"})}),"\n",(0,t.jsx)(s.p,{children:"Represents a plan consisting of tasks."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Attributes"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"main_goal"})," - The main goal of the plan."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"task"})," - The root task of the plan."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"__init__-1",children:"__init__"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"def __init__(task: str)\n"})}),"\n",(0,t.jsx)(s.p,{children:"Initializes a new instance of the Plan class."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"task"})," - The main goal of the plan."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"__str__",children:"__str__"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"def __str__()\n"})}),"\n",(0,t.jsx)(s.p,{children:"Returns a string representation of the plan."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsx)(s.p,{children:"A string representation of the plan."}),"\n",(0,t.jsx)(s.h4,{id:"get_task_by_id",children:"get_task_by_id"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"def get_task_by_id(id: str) -> Task\n"})}),"\n",(0,t.jsx)(s.p,{children:"Retrieves a task by its ID."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"id"})," - The ID of the task."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsx)(s.p,{children:"The task with the specified ID."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Raises"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"ValueError"})," - If the provided task ID is invalid or does not exist."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"add_subtask",children:"add_subtask"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"def add_subtask(parent_id: str, goal: str, subtasks: List = [])\n"})}),"\n",(0,t.jsx)(s.p,{children:"Adds a subtask to a parent task."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"parent_id"})," - The ID of the parent task."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"goal"})," - The goal of the subtask."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"subtasks"})," - A list of subtasks associated with the new subtask."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"set_subtask_state",children:"set_subtask_state"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"def set_subtask_state(id: str, state: str)\n"})}),"\n",(0,t.jsx)(s.p,{children:"Sets the state of a subtask."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Arguments"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"id"})," - The ID of the subtask."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"state"})," - The new state of the subtask."]}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"get_current_task-1",children:"get_current_task"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"def get_current_task()\n"})}),"\n",(0,t.jsx)(s.p,{children:"Retrieves the current task in progress."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsx)(s.p,{children:"The current task in progress, or None if no task is in progress."})]})}function o(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>a});var t=n(6540);const i={},r=t.createContext(i);function l(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);